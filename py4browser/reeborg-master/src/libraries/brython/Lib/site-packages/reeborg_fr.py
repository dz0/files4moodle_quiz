from browser import window

from reeborg_common import *

__id = "fr"

_usage_ = '''
<h2 id="%s">Commandes de base</h2>

    <p>Veuillez prendre note: en Javascript, <code>true</code> et <code>false</code> sont écrits
    en lettre minuscules; en Python, <code>True</code> et <code>False</code> débutent avec une
    lettre majuscule.  Pour éviter de spécifier ceci à chaque fois ci-dessous, j'utiliserai
    "vrai" et "false" pour signifier la même chose.</p>
    <p><b>Attention:</b> Vous pouvez écrire des noms de commandes
    avec des accents en Javascript mais pas en Python.</p>

<p> En plus de comprendre le Javascript ou le Python, Reeborg et tous les autres robots
connaissent les instructions suivantes:
</p>
<ul>
  <li><code>au_but()</code>: la condition est "vrai" si Reeborg a atteint son but.</li>
  <li><code>construit_un_mur()</code>: ajoute un mur tout juste devant la position de Reeborg</li>
  <li><code>termine</code>: indique qu'un programme doit se terminer avec cette instruction. </li>
  <li><code>rien_devant()</code>: "vrai" s'il n'y a pas de mur bloquant la voie de Reeborg.</li>
  <li><code>face_au_nord()</code>: "vrai" si Reeborg fait face au nord (vers le haut de l'écran).
      </li>
  <li><code>avance()</code></li>
  <li><code>depose()</code> ou <code>depose("objet")</code> où "objet" est l'un de
    <code>"jeton"</code>,
    <code>"triangle"</code>, <code>"carré"</code>, <code>"étoile"</code>, etc. :
    Reeborg dépose l'objet
    en question là où il se trouve.</li>
    <li><code>objet_ici()</code>: retourne une liste vide, équivalente logique à "false"
    s'il n'y a aucun objet à cet endroit, autrement on
    retourne une liste contenant le nom des objets trouvés à cet endroit. On peut également
    spécifier le nom d'un objet comme argument de cette fonction pour vérifier si au moins
    un objet du genre s'y trouve.</li>
    <li><code>transporte()</code>: indique si Reeborg transporte des objets ou non. L'utilisation
    est tout à fait semblable à celle de <code>objet_ici()</code>.
    </li>
  <li><code>rien_a_droite()</code>: "vrai" s'il n'y a pas de mur immédiatement à la droite de
      Reeborg.</li>
  <li><code>repete(f, n)</code>: excute <code>f()</code> n fois.</li>
  <li><code>prend()</code> ou <code>prend("objet")</code> où "objet" est l'un de
     <code>"jeton"</code>, <code>"triangle"</code>, <code>"carré"</code>,
     <code>"étoile"</code>, etc.</li>
  <li><code>tourne_a_gauche()</code></li>
</ul>


<p>Pour créer des robots, on peut utiliser <code>RobotUsage()</code> prédédé de <code>new</code>
si on utilise Javascript.
</p>
<p>De plus, les commandes suivantes sont généralement disponibles sans être liées
  à un robot en particulier. </p>
<ul>
    <li><code>from biblio import *</code>: pour <b>Python</b>, iinclut le code qui se trouve sous
        l'onglet bibliothèque</li>
  <li><code>examine(objet Javascript)</code></li>
  <li><code>pause()</code>; peut être invoqué avec un argument en millisecondes
  indiquant la durée
  de la pause dans quel cas le programme continue sans avoir à cliquer sur un bouton. </li>
    <li><code>son("vrai")</code>: ajoute des effets sonores. Ces effets sonores peuvent être
        arrêtés en utilant "false" comme argument ou omettant l'argument comme ceci:
        <code>son()</code>.
        Les effets sonores sont arrêtés par défaut ou si le délai entre les actions est
        inférieur à 250ms.  </li>
  <li><code>pense(nombre)</code>: spécifie le montant de temps (en millisecondes) entre chaque
      action d'un robot. </li>
  <li><code>ecrit(chaîne)</code>: écrit une chaîne de caractère dans le journal de Reeborg,
      par exemple <code>ecrit("Bonjour !")</code>,
    mais <b>seulement</b> si le monde est visible - autrement utiliser <code>print</code>. </li>
  <li><code>Monde(chaîne)</code>: sélectionne un monde donné. </li>
  <li><code>Permalien(chaîne)</code>: sélectionne un monde donné. </li>
  <li><code>print(chaîne)</code>: seulement valide avec Python; semblable à <code>write</code>.
  </li>
</ul>
''' % ("basic-commands-" + __id)
RUR = window.RUR
RUR.ui.add_help(_usage_, __id, "Français",
                "Au lieu de biblio, jeton, étoile, triangle et carré, utilisez : ")


# RUR._x_ defined in commands.js
au_but = RUR._at_goal_
construit_un_mur = RUR._build_wall_
rien_devant = RUR._front_is_clear_
face_au_nord = RUR._is_facing_north_
avance = RUR._move_
depose = RUR._put_
rien_a_droite = RUR._right_is_clear_
prend = RUR._take_
tourne_a_gauche = RUR._turn_left_
nombre_de_commandes = RUR._set_max_steps_
nombre_de_robots = RUR._set_max_nb_robots_
# defined in rur_utils.js
examine = RUR.inspect
voir_source = RUR.view_source
# defined in control.js
ecrit = RUR.control._write
termine = RUR.control.done
son = RUR.control.sound
pense = RUR.control.think
pause = RUR.control.pause
# defined in ui.js
Monde = RUR.ui.load_world
Permalien = RUR.load_permalink
narration = RUR.control.narration
clear_print = RUR.control.clear_print
couleur_de_trace = RUR._set_trace_color_
style_de_trace = RUR.vis_robot.set_trace_style

def objet_ici(arg=None):
    if arg is not None:
        ans = RUR._object_here_(arg)
    else:
        ans = RUR._object_here_()
    return list(ans)  # convert from Javascript list-like object to proper Python list


def transporte(arg=None):
    if arg is not None:
        ans = RUR._carries_object_(arg)
    else:
        ans = RUR._carries_object_()
    return list(ans)


def repete(f, n):
    if not isinstance(n, int):
        raise ReeborgError("Le deuxième argument de la fonction repete devrait être un nombre entier.")
    for i in range(n):
        f()

# The following is the only language specific function which can only be used in monde.html,
# not when imported from world.html
try:
    confirmer = RUR.confirmer
except AttributeError:
    pass


class RobotUsage(object):
    def __init__(self, x=1, y=1, orientation='e', jetons=None):
        if jetons is None:
            robot = RUR.robot.create_robot(x, y, orientation)
        else:
            robot = RUR.robot.create_robot(x, y, orientation, jetons)
        self.body = robot
        RUR.world.add_robot(self.body)

    def avance(self):
        RUR.control.move(self.body)

    def au_but(self):
        return RUR.control.at_goal(self.body)

    def construit_un_mur(self):
        RUR.control.build_wall(self.body)

    def rien_devant(self):
        return RUR.control.front_is_clear(self.body)

    def face_au_nord(self):
        return RUR.control.is_facing_north(self.body)

    def depose(self, arg=False):
        RUR.control.put(self.body, arg)

    def rien_a_droite(self):
        return RUR.control.right_is_clear(self.body)

    def objet_ici(self, obj=''):
        return list(RUR.control.object_here(self.body, obj))

    def transporte(self, obj=''):
        return list(RUR.control.carries_object(self.body, obj))

    def prend(self, arg=False):
        RUR.control.take(self.body, arg)

    def tourne_a_gauche(self):
        RUR.control.turn_left(self.body)

    def modèle(self, model):
        RUR.control.set_model(self.body, model)

    def couleur_de_trace(self, color):
        RUR.control.set_trace_color(self.body, color)

    # do not document this in the usage section
    # and leave untranslated
    def __get_world_map(self):
        import json
        return json.loads(RUR.control.get_world_map())
